{
  "unit_name": "Los Basicos",
  "unit_description": "",
  "lessons": [
    {
      "title": "Hola Mundo",
      "content": "  **JavaScript** es un lenguaje de programación que se utiliza para crear sitios web dinámicos y interactivos. Esta aplicación estaba creada con casi 90% JavaScript. Lo único que no esta hecho usando JavaScript es la parte en la panatalla que se ve. La lógica y interacción fue 100% programado en JavaScript.\n  En esta primera lección, vamos a aprender como escribir algo en la terminal. Primero voy definir que es una terminal. **La terminal** es una interfaz de texto que permite interactuar con el sistema operativo de una computadora mediante comandos escritos. En estas lecciones, la terminal solo va mostrar los resultados de tu código.\n   Un **comando** es una instrucción dada a una computadora para que realice una acción específica. Cada comando tiene que terminar con un punto y coma (***;***). Los comandos se tienen que escribir exactamente como se ven. Esto quiere decir, si pones un mayúscula o minúscula incorrecta el comando no va trabajar.\n  Para escribir en la terminal, se usa el comando `console.log()`. Lo que se escribe en los paréntesis se graba en la terminal. Puedes poner variables como numeros, texto, y otras en los paréntesis. Por ejemplo si pongo `console.log(1);` , el número 1 se graba en la terminal.\n  Para grabar texto, tienes que escribirlo entre dos comillas (*\"lo que quieres decir va aqui\"*). Por ejemplo `console.log(\"Buenos dias\");`, graba '*Buenos dias*' en la terminal.\n  Recuerdate que el comando se tiene que escribir exactamente como es. Si escribo `console.log()`, el comando no va trabajar porque la computadora no va reconocer la mayúscula.\n\n<span class='note'>**Nota:** Cuando una linea empieza con `//`, el programa lo ignora. Se les dicen \"comentos\". Los comentos sirven para escribir notas en el codigo.</span>\n\n<span class=\"note\">**Practica:** Usa el comando `console.log();` para grabar 'Hola Mundo' en la terminal.\n<br> Presiona <svg class='button run' height='1.5rem' width='4rem' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='#000000'><path d='M2.78 2L2 2.41v12l.78.42 9-6V8l-9-6zM3 13.48V3.35l7.6 5.07L3 13.48z'/><path fill-rule='evenodd' clip-rule='evenodd' d='M6 14.683l8.78-5.853V8L6 2.147V3.35l7.6 5.07L6 13.48v1.203z'/></svg> para probar tu codigo.\n Presiona <svg class='button' height='1.5rem' width='4rem' viewBox='0 0 1024 1024' class='icon'  version='1.1' xmlns='http://www.w3.org/2000/svg'><path d='M905.92 237.76a32 32 0 0 0-52.48 36.48A416 416 0 1 1 96 512a418.56 418.56 0 0 1 297.28-398.72 32 32 0 1 0-18.24-61.44A480 480 0 1 0 992 512a477.12 477.12 0 0 0-86.08-274.24z' fill='#231815' /><path d='M630.72 113.28A413.76 413.76 0 0 1 768 185.28a32 32 0 0 0 39.68-50.24 476.8 476.8 0 0 0-160-83.2 32 32 0 0 0-18.24 61.44zM489.28 86.72a36.8 36.8 0 0 0 10.56 6.72 30.08 30.08 0 0 0 24.32 0 37.12 37.12 0 0 0 10.56-6.72A32 32 0 0 0 544 64a33.6 33.6 0 0 0-9.28-22.72A32 32 0 0 0 505.6 32a20.8 20.8 0 0 0-5.76 1.92 23.68 23.68 0 0 0-5.76 2.88l-4.8 3.84a32 32 0 0 0-6.72 10.56A32 32 0 0 0 480 64a32 32 0 0 0 2.56 12.16 37.12 37.12 0 0 0 6.72 10.56zM230.08 467.84a36.48 36.48 0 0 0 0 51.84L413.12 704a36.48 36.48 0 0 0 51.84 0l328.96-330.56A36.48 36.48 0 0 0 742.08 320l-303.36 303.36-156.8-155.52a36.8 36.8 0 0 0-51.84 0z' fill='#231815' /></svg> para revisar tu codigo. </span>",
      "starting_code": "// Pon tu mensaje adentro de la comillas\nconsole.log(\"\");",
      "expected_result": "^Hola Mundo$",
      "completed": false 
    },
    {
      "title": "Las Variables",
      "content": "  Las Variables son bien importante. Una **variable** es como una caja donde se puede guardar información.\n  Para acceder una variable, se le tiene que dar un nombre. Hay una serie de reglas para darle un nombre a los variables:\n1. El nombre tiene que empezar con una letra, un _, o un $.\n2. El nombre no puede contener espacios.\n3. No se puede usar palabras reservadas.\n4. Se usa camelCase para formar el nombre.\n5. No se deben usar acentos ni caracteres especiales en los nombres de variables.\n\n<span class='note'>**Importante:** Las mayúsculas y minúsculas no se consideran como la misma letras. Entonces los nombres `console` y `Console` no se consideran como el mismo nombre. El primer nombre (`console`) va ser reconocido como una palabra reservada pero el segundo nombre no.</span>\n   Que es una **palabra reservada**? Una palabra reservada es una palabra especial el lenguaje (como JavaScript) ya tiene guardada para darle un significado propio. No se puede usar como un nombre porque la computadora ya sabe que sirve para otra cosa. Por ejemplo, una variable no se puede llamar `console` porque es una palabra reservada.\n\nEstos son algunas palabras reservadas:\n* `break`\n* `case`\n* `catch`\n* `class`\n* `continue`\n* `default`\n* `do`\n* `export`\n* `extends`\n* `import`\n\nQue es **camelCase**. camelCase (estiloCamello) es una forma de escribir nombres de variables o funciones donde la primera palabra empieza con minúscula. Cada palabra siguiente empieza con mayúscula y sin espacios. Es una manera de crear nombres sin tener que usar espacios o guiones.\n   En JavaScript, el comando `let` se usa para crear una variable nueva. Por ejemplo, el comando `let x = 5;` hace una variable que se llama '`x`'. La variable '`x`' contiene el número 5. Si lo imprimo en la terminal usando `console.log(x);`, entonces la terminal imprime 5.\n   <span class='note'>**Recuerda!** La mayúscula y minúscula no se consideran como la misma letra. Si intento `console.log(X)` (usando la `x` mayúscula), la computadora no va saber lo que quiero imprimir.</span> <span class='note'>**Practica:** Crea un variable llamado `x` y dale el valor `10`</span>",
      "starting_code": "// Codigo aqui\n\n\n// No cambies esto \nconsole.log(x);",
      "expected_result": "^10$",
      "completed": false
    },
    {
      "title": "Los Tipos de Variables",
      "content": "  Hay diferentes tipos de variables. Los 3 mas comunes que vas usar se llaman \nLos 3 más comunes que vas a usar son:\n\n* **Boolean** – Representa verdadero o falso (`true` / `false`).\n* **Número** – Representa valores numéricos (`1`, `3.14`, `-7`).\n* **String** – Representa texto, encerrado entre comillas (`\"Hola\"`, `'Mundo'`).\n\n Hay mas que tres variables, pero estos son los tres en que nos vamos enfocar por ahora.\n  Un **Boolean** es una variable que solo tiene dos valores, `true` (verdad) o `false` (falso). Se puede inicializar usando una de sus dos valores. Por ejemplo, `let x = true;` y `let y = false;` En estos ejemplos, la variable `x` es un boolean que tiene el valor `true` y la varaible `y` es un boolean que tiene el valor `false`.\n   Un **Número** es un tipo de varialbe que solo contiene numeros. Los numeros pueden ser decimales o entero. Una variable que contiene numeros se puede inicializar usando un número. Por ejemplo, `let número = 2.5;`, En este ejemplo, la variable `número` contiene `2.5`.\n  Un **String** es una variable que puede contener letras, numeros, espacios, y cáracteres especiales. Todo que quieres poner dentro de un String se tiene poner dentro de dos comillas (**\"**). Por ejemplo, `let oracionEjemplo = \"Hola, como estas?\";` En este ejemplo, la variable `oracionEjemplo` contiene un String que contiene la oracion <span class='fakestring'>Hola, como estas?</span>\n  <span class='note'>**Practica:**\nHaga que la variable `x` sea un **Boolean** que contiene el valor `true`,\nque la variable `y` sea un **Numero** que contiene el valor `11`,\ny que la variable `z` sea un **String** que contiene la oracion <span class='fakestring'>Buenos dias</span>.</span>",
      "starting_code": "let x = ;\nlet y = ;\nlet z = \"\";\nconsole.log(x);\nconsole.log(y);\nconsole.log(z);",
      "expected_result": "^true\r\n11\r\nBuenos dias$",
      "completed": false
    },
    {
      "title": "Operaciones Aritméticas",
      "content": "Los idiomas de programación tienen operaciónes aritméticas. Esto son cosas como adición, sustracción, multiplicación, y otras operaciónes aritméticas.\r\n<span class='note'>**Importante**: La variable siempre va estar al lado izquierdo y las operaciónes aritméticas al lado derecho.</span>\r\n**Las Operaciones**:\r\n* `+` se usa para realizar una suma. Por ejemplo, `let s = 10 + 10;` En este caso, el valor de `s` va a ser `20`.\r\n* `-` se usa para realizar sustracción. Por ejemplo, `let r = 20 – 5;` La variable `r` va a tener el valor de `15`.\r\n* `*` se usa para realizar multiplicación. Por ejemplo `let m = 3 * 2;` La variable `m` va a tener el valor de `6`.\r\n* `/` su usa para realizar división. En el ejemplo `let d = 5 / 2;` La variable `d` va a tener el valor de `2.5`. Esto es porque el número a la izquierda es el dividendo, lo que quieres repartir. El numéro a la derecha es el divisor, en cuantas partes lo vas a repartir.\r\n* `**` se usa para usar exponentes. El exponente es una forma rápida de multiplicar el mismo número varias veces. Por ejemplo, `let x = 2**3;` El número en el lado izquierdo es el número que quieres multiplicar por si mismo. El número en el lado derecho es la cantidad de veces que quieres multiplicar el primer número por si mismo. Es lo mismo que tu hubiera escrito `2 * 2 * 2`. Entonces, la variable `x` va tener el valor de `8`.\r\n* `%` se llama el módulo. El resultado de esta operación es el resto que sobra cuando haces una división. En el módulo, la división no puede usar decimales, tiene que ser con números enteros. Por ejemplo, Imagina que tienes **5** centavos y quieres dividir esos centavos entre **2** amigos en partes iguales. Cada amigo se va quedar con **2** centavos y te va sobrar **1** centavo. El centavo que sobró no se puede romper en dos ni se le puede dar a ninguno de los amigos. Este centavo es el resto que calcula el módulo. Entonces en la línea `let modulo = 5 % 2`, la variable `modulo` va tener el valor de `1`.\n<span class='note'>**Practica:** Usa cada operacion con la variable que tiene el nombre que es correlacionada con la operacion. Haga que el número en el lado izquerdo sea un `11` y el número en el lado derecho que sea un `2` y observa como cada operacion da una respuesta diferente</span>",
      "starting_code": "let mas = 11  2;\nlet menos = 11  2;\nlet multiplicacion = 11  2;\nlet division = 11  2;\nlet exponente = 11  2;\nlet modulo = 11  2;\n\nconsole.log(\"mas:\", mas);\nconsole.log(\"menos:\", menos);\nconsole.log(\"multiplicacion:\", multiplicacion);\nconsole.log(\"division:\", division);\nconsole.log(\"exponente:\", exponente);\nconsole.log(\"modulo:\", modulo);",
      "expected_result": "^mas: 13\r\nmenos: 9\r\nmultiplicacion: 22\r\ndivision: 5.5\r\nexponente: 121\r\nmodulo: 1$",
      "completed": false
    },
    {
      "title": "Operadores de Comparación",
      "content": "Ahora vamos a aprender como comparar los variables y sus valores. Los símbolos que se usan para hacer comparaciones se llaman operadores de comparación. Se puede usar para comparar dos variables o un variable con un valor. Cunado las condiciones de los operadores se cumplen, el operador responde con `true`. Cuando no se cumplen, responde con `false`\nLos operadores de comparación:\n* `===` se usa para ver si dos variables tienen el mismo valor\n* `!==` se usa para ver si dos variables tienen diferentes valores\n* <span class='fakestring white'> > </span> se usa para ver si un valor es mayor que el otro\n* <span class='fakestring white'> < </span> se usa ver si un valor es menor que el otro\n* <span class='fakestring white'> >= </span> se usa para ver si un valor es mayor o el mismo que el otro\n* <span class='fakestring white'> <= </span> se usa para ver si un valor es mayor o el mismo que el otro\n\n**¿Como se usan?** \nEl variable a la izquierda es el valor que tu quieres comparar y el valor que va a la derecha es el valor/variable con que quieres comparar. Vamos a ver cómo se usa cada operación y la respuesta en unos ejemplos. \nEn estos ejemplos, vamos tener estos variables: `a = 3`, `b = 4`\n**Ejemplos:** \n* `a === 3`, resulta en `true`. Estamos viendo si la variable `a` tiene el mismo valor que el número 3. Sabemos que la variable `a` tiene el valor de 3, que es igual al número con que lo estamos comparando. Entonces, la respuesta es `true`.\n* `a !== b`, resulta en `true`. Esto es porque lo que queremos ver es si el valor de la variable `a` es diferente de la variable `b`. Como la `a` tiene un valor de 3 y la `b` tiene un valor de 4, los valores de las variables si son diferentes. Por eso resulta en `true`.\n* <span class='fakestring white'> b < 3 </span>, resulta en `false`. Estamos averiguando si el valor de `b` es menor que 3. Sabemos que `b` tiene el valor de 4. Entonces, no es verdad que `b` es menor que 3, por eso resulta en un `false`\n* <span class='fakestring white'> b > a </span>, resulta en `true`. Estamos averiguando si el valor de `b` es mayor que el valor de `a`. Sabemos que el valor de `b` (4) es mayor de la de `a` (3). \n* <span class='fakestring white'> b >= 4 </span>, resulta en `true`. En este caso, queremos ver si el valor de `b` es mayor o igual al número 4. Como `b` tiene el valor de 4, sabemos que su valor es igual. \n* <span class='fakestring white'> a <= 2 </span>, resulta en `false`. Queremos ver si `a` es menor o igual el número 2. Como `a` tiene el valor de 3, no es menor ni igual al número 2. \n<span class='note'>**Practica:**\nCambia los operadores para que todos los resultados resulten en `true`</span>",
      "starting_code": "// No cabmies x o y\nlet x = 12;\nlet y = 10;\n\n// Cambia aqui los operadores (No cambies los numéros)\nconsole.log(x === 13); \nconsole.log(y >= x); \nconsole.log(x !== 12); \nconsole.log(x < 5); \nconsole.log(y > 12); \nconsole.log(y <= 9);",
      "expected_result": "true\r\ntrue\r\ntrue\r\ntrue\r\ntrue\r\ntrue",
      "completed": false
    },
    {
      "title": "Formato de Strings",
      "content": "  Muchas veces vas a querer juntar texto con otras variables para hacer oraciones completas. Esto se llama **formatear un String**. Hay dos maneras muy comunes en JavaScript:\n\n* **Concatenación con `+`** – Une texto y variables usando el signo `+`.\n\n**Ejemplo:**\n```js\nlet nombre = \"foo\";\n\"Hola \" + nombre + \"!\"; // \"Hola foo!\"\n```\nNota el espacio en el `\"Hola \"`. Cuando juntando texto, el programa lo junta exacto como lo escribiste. Sin ese espacio solo seria:\n```js\n\"Hola\" + nombre + \"!\"; // \"Holafoo!\"\n```\n\n* **Template literals con `${}`** – Usa comillas invertidas `` ` `` en lugar de comillas normales (se encuntra a la izquierda del 1 en el teclado), y coloca variables dentro de `${}`. Esto permite juntar texto y variables de forma más fácil y legible.\n\nEjemplo: \n```js\nlet nombre = \"foo\";\n`Hola ${nombre}!`; // \"Hola foo!\"\n```\n\nAmbos funcionan igual, pero los *template literals* son más fáciles de leer y escribir, especialmente cuando hay muchas variables.\n\nPor ejemplo, si tienes muchas variables:\n* Concatenación: `\"Hola, me llamo \" + nombre + \", tengo \" + edad + \" años y vivo en \" + ciudad + \".\"`\n* Template literal: `` `Hola, me llamo ${nombre}, tengo ${edad} años y vivo en ${ciudad}.` ``\n\nNormalmente es mas facil usar los `` ` `` que tener que escribir `\"\" + \"\"` varias veces.\n\n<span class='note'>**Práctica:** Crea una variable `nombre` que contiene tu nombre, y luego crea otra variable `mensaje` que sea un String con el text formateado para que te diga `\"Hola [tu nombre]!\"`.</span>",
      "starting_code": "// Paso 1: Crea una variable con tu nombre\nlet nombre = \"\";\n\n// Paso 2: Crea un mensaje que diga \"Hola [tu nombre]!\"\n// usando concatenación (+) o template literals (`${}`) \nlet mensaje = ;\nconsole.log(mensaje);",
      "expected_result": "^Hola [A-Za-z]+$",
      "completed": false
    },
    {
      "title": "Proyecto 0",
      "content": "  Ahora vamos a hacer un proyecto para ver si entendiste. Después de cada unidad te daremos un projecto.\n<span class=\"note\">**Objetivo**:\n Crea un Programa simple que dice la historia de un busco de tesoros. Implementa lo que has aprendido en las lecciones pasadas.</span>\n**Instrucciones**\n**Crea** variables:\n* `nombre` - Tu nombre de pirata (String, por ejemplo \"Capitan Hook\")\n* `tesoro` - Tipo de tesoro (String)\n* `encontrado` - Cantidad del tesoro que encontraste (Numero)\n* `enterrado` - Cantidad de tesoro que enterraste (Numero)\n\n**Usa** operaciónes para calcular lo proximo y guarda el valor en variables:\n* `total` - El tesoro total\n* `resto` - Cuanto te queda despues de gastar 5\n\n**Crea Strings usando concatenación**\n* **Saludo** (<span class='fakestring'>\"Ahoy, <span class='emph'>[nombre]</span>\"</span>)\n* **Reporte** (<span class='fakestring'>\"Encontraste <span class='emph'>[número] [tesoros]</span> y tenías <span class='emph'>[número]</span> enterradas.\")\n* **Resumen** (<span class='fakestring'>\"Eso hace <span class='emph'>[número] [tesoros]</span> en total. Después de gastar 5, todavía te quedan <span class='emph'>[número]</span>\"</span>)\n\n**Ejemplo:** No lo copies<div class='fakestring'>\"Ahoy, Capitán Hook!\"\n\"Encontraste 15 Zapatos Usados y tenías 7 enterradas.\"\n\"Eso hace 22 monedas de oro en total. Después de gastar 5, todavía te quedan 17!\"</div>\nDespues **imprime** los mensajes en el terminal",
      "starting_code": "// Variables\n\n\n// Calcuados\n\n\n// Mensajes\nlet saludo;\nlet reporte;\nlet resumen;\n\n// Mostra los mensajes en el terminal\n\n",
      "expected_result": "^Ahoy, .+!\r\nEncontraste \\d+ .+ y tenías \\d+ enterradas\\.\r\nEso hace \\d+ .+ en total\\. Después de gastar 5, todavía te quedan \\d+!$",
      "completed": false
    }
  ]
}
