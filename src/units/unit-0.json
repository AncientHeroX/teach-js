{
  "unit_name": "Los Basicos",
  "unit_description": "",
  "lessons": [
    {
      "title": "Hola Mundo",
      "content": "  **JavaScript** es un lenguaje de programación que se utiliza para crear sitios web dinámicos y interactivos. Esta aplicación estaba creada con casi 90% JavaScript. Lo único que no esta hecho usando JavaScript es la parte en la panatalla que se ve. La lógica y interacción fue 100% programado en JavaScript.\n  En esta primera lección, vamos a aprender como escribir algo en la terminal.Primero voy definir que es una terminal. **La terminal** es una interfaz de texto que permite interactuar con el sistema operativo de una computadora mediante comandos escritos. En estas lecciones, la terminal solo va mostrar los resultados de tu código.\n   Un **comando** es una instrucción dada a una computadora para que realice una acción específica. Cada comando tiene que terminar con un punto y coma (***;***). Los comandos se tienen que escribir exactamente como se ven. Esto quiere decir, si pones un mayúscula o minúscula incorrecta el comando no va trabajar.\n  Para escribir en la terminal, se usa el comando `console.log()`. Lo que se escribe en los paréntesis se graba en la terminal. Puedes poner variables como numeros, texto, y otras en los paréntesis. Por ejemplo si pongo `console.log(1);` , el numero 1 se graba en la terminal.\n  Para grabar texto, tienes que escribirlo entre dos comillas (*\"lo que quieres decir va aqui\"*). Por ejemplo `console.log(\"Buenos dias\");`, graba '*Buenos dias*' en la terminal.\n  Recuerdate que el comando se tiene que escribir exactamente como es. Si escribo `console.log()`, el comando no va trabajar porque la computadora no va reconocer la mayúscula.\n <span class=\"note\"> **Practica:** Usa el comando `console.log();` para grabar 'Hola Mundo' en la terminal.\n<br> Presiona <svg class='button run' height='1.5rem' width='4rem' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='#000000'><path d='M2.78 2L2 2.41v12l.78.42 9-6V8l-9-6zM3 13.48V3.35l7.6 5.07L3 13.48z'/><path fill-rule='evenodd' clip-rule='evenodd' d='M6 14.683l8.78-5.853V8L6 2.147V3.35l7.6 5.07L6 13.48v1.203z'/></svg> para probar tu codigo.\n Presiona <svg class='button' height='1.5rem' width='4rem' viewBox='0 0 1024 1024' class='icon'  version='1.1' xmlns='http://www.w3.org/2000/svg'><path d='M905.92 237.76a32 32 0 0 0-52.48 36.48A416 416 0 1 1 96 512a418.56 418.56 0 0 1 297.28-398.72 32 32 0 1 0-18.24-61.44A480 480 0 1 0 992 512a477.12 477.12 0 0 0-86.08-274.24z' fill='#231815' /><path d='M630.72 113.28A413.76 413.76 0 0 1 768 185.28a32 32 0 0 0 39.68-50.24 476.8 476.8 0 0 0-160-83.2 32 32 0 0 0-18.24 61.44zM489.28 86.72a36.8 36.8 0 0 0 10.56 6.72 30.08 30.08 0 0 0 24.32 0 37.12 37.12 0 0 0 10.56-6.72A32 32 0 0 0 544 64a33.6 33.6 0 0 0-9.28-22.72A32 32 0 0 0 505.6 32a20.8 20.8 0 0 0-5.76 1.92 23.68 23.68 0 0 0-5.76 2.88l-4.8 3.84a32 32 0 0 0-6.72 10.56A32 32 0 0 0 480 64a32 32 0 0 0 2.56 12.16 37.12 37.12 0 0 0 6.72 10.56zM230.08 467.84a36.48 36.48 0 0 0 0 51.84L413.12 704a36.48 36.48 0 0 0 51.84 0l328.96-330.56A36.48 36.48 0 0 0 742.08 320l-303.36 303.36-156.8-155.52a36.8 36.8 0 0 0-51.84 0z' fill='#231815' /></svg> para revisar tu codigo. </span>",
      "starting_code": "console.log(\"\");",
      "expected_result": "^Hola Mundo$",
      "completed": false 
    },
    {
      "title": "Las Variables",
      "content": "  Las Variables son bien importante. Una **variable** es como una caja donde se puede guardar información.\n  Para acceder una variable, se le tiene que dar un nombre. Hay una serie de reglas para darle un nombre a los variables: 1) El nombre tiene que empezar con una letra, un _, o un $. 2) El nombre no puede contener espacios. 3) No se puede usar palabras reservadas. 4) Se usa camelCase para formar el nombre.\n   <span class='note'>**Importante:** Las mayúsculas y sculas no se consideran como la misma letras. Entonces los nombres `console` y `Console` no se consideran como el mismo nombre. El primer nombre (`console`) va ser reconocido como una palabra reservada per sel segundo nombre no.</span>\n   Que es una **palabra reservada**? Una palabra reservada es una palabra especial el lenguaje (como JavaScript) ya tiene guardada para darle un significado propio. No se puede usar como un nombre porque la computadora ya sabe que sirve para otra cosa. Por ejemplo, una variable no se puede llamar `console` porque es una palabra reservada.\n   Que es **camelCase**. camelCase (estiloCamello) es una forma de escribir nombres de variables o funciones donde la primera palabra empieza con minúscula. Cada palabra siguiente empieza con mayúscula y sin espacios. Es una manera de crear nombres sin tener que usar espacios o guiones.\n   En JavaScript, el comando `let` se usa para crear una variable nueva. Por ejemplo, el comando `let x = 5;` hace una variable que se llama '`x`'. La variable '`x`' contiene el numero 5. Si lo imprimo en la terminal usando `console.log(x);`, entonces la terminal emprime 5.\n   <span class='note'>**Recuerda!** La mayúscula y minúscula no se consideran como la misma letra. Si intento `console.log(X)` (usando la `x` mayúscula), la computadora no va saber lo que quiero emprimir.</span> <span class='note'>**Practica:** haga que la variable `x` contenga el numero '10'</span>",
      "starting_code": "let x = ;\nconsole.log(x);",
      "expected_result": "^10$",
      "completed": false
    },
    {
      "title": "Los Tipos de Variables",
      "content": "  Hay diferentes tipos de variables. Los 3 mas comunes que vas usar se llaman \nLos 3 más comunes que vas a usar son:\n\n* **Boolean** – Representa verdadero o falso (`true` / `false`).\n* **Número** – Representa valores numéricos (`1`, `3.14`, `-7`).\n* **String** – Representa texto, encerrado entre comillas (`\"Hola\"`, `'Mundo'`).\n\n Hay mas que tres variables, pero estos son los tres en que nos vamos enfocar por ahora.\n  Un **Boolean** es una variable que solo tiene dos valores, `true` (verdad) o `false` (falso). Se puede inicializar usando una de sus dos valores. Por ejemplo, `let x = true;` y `let y = false;` En estos ejemplos, la variable `x` es un boolean que tiene el valor `true` y la varaible `y` es un boolean que tiene el valor `false`.\n   Un **numero** es un tipo de varialbe que solo contiene numeros. Los numeros pueden ser decimales o entero. Una variable que contiene numeros se puede inicializar usando un numero. Por ejemplo, `let numero = 2.5;`, En este ejemplo, la variable `numero` contiene `2.5`.\n  Un **String** es una variable que puede contener letras, numeros, espacios, y cáracters especiales. Todo que quieres poner dentro de un String se tiene poner dentro de dos comillas (**\"**). Por ejemplo, `let oracion Ejemplo = \"Hola, como estas?\";` En este ejemplo, la variable `oracion Ejemplo` contiene un String que contiene la oracion `Hola, como estas?`\n  <span class='note'>**Practica:** Haga que la variable `x` sea un **Boolean** que contiene el valor `true`, que la variable `y` sea un **Numero** que contiene el numero `11`, y que la variable `z` sea un **String** que contiene la oracion `Buenos dias`.</span>",
      "starting_code": "let x = ;\nlet y = ;\nlet z = \"\";\nconsole.log(x);\nconsole.log(y);\nconsole.log(z);",
      "expected_result": "^true\r\n11\r\nBuenos dias$",
      "completed": false
    },
    {
      "title": "Operaciones Aritméticas",
      "content": "Los idiomas de programación tienen operaciones aritméticas. Esto son cosas como adición, sustracción, multiplicación, y otras operaciones aritméticas.\r\n<span class='note'>**Importante**: La variable siempre va estar al lado izquierdo y las operaciones aritméticas al lado derecho.</span>\r\n**Las Operaciones**:\r\n\t- `+` se usa para realizar una suma. Por ejemplo, `let suma = 10 + 10;` En este caso, el valor de `suma` va a ser `20`.\r\n\t`-` se usa para realizar sustracción. Por ejemplo, `let s = 20 – 5;` La variable `s` va a tener el valor de `15`.\r\n\t- `*` se usa para realizar multiplicación. Por ejemplo `let m = 3 * 2;` La variable `m` va a tener el valor de `6`.\r\n\t- `/` su usa para realizar división. En el ejemplo `let d = 5 / 2;` La variable `d` va a tener el valor de `2.5`. Esto es porque el numero a la izquierda es el dividendo, lo que quieres repartir. El numera a la derecha es el divisor, en cuantas partes lo vas a repartir.\r\n\t- `**` se usa para usar exponentes. El exponente es una forma rápida de multiplicar el mismo número varias veces. Por ejemplo, `let ex = 2**3;` El numero en el lado izquierdo es el numero que quieres multiplicar. El numero en el lado derecho es la cantidad de veces que quieres multiplicar el primer número. Es lo mismo que tu hubiera escrito `2 * 2 * 2`. Entonces, la variable `ex` va tener el valor de `8`.\r\n\t- `%` se llama el módulo. El resultado de esta operación es el resto que sobra cuando haces una división. En el módulo, la división no puede usar decimales, tiene que ser con números enteros. Por ejemplo, Imagina que tienes **5** centavos y quieres dividir esos centavos entre **2** amigos en partes iguales. Cada amigo se va quedar con **2** centavos y te va sobrar **1** centavo. El centavo que sobró no se puede romper en dos ni se le puede dar a ninguno de los amigos. Este centavo es el resto que calcula el módulo. Entonces en la línea `let modulo = 5 % 2`, la variable `modulo` va tener el valor de `1`. <span class='note'>**Practica:** Usa cada operacion con la variable que tiene el nombre que es correlacionada con la operacion. Haga que el numero en el lado izquerdo sea un `11` y el numero en el lado derecho que sea un `2` y observa como cada operacion da una respuesta diferente</span>",
      "starting_code": "let mas = ;\r\nlet menos = ;\r\nlet multiplicacion = ;\r\nlet division = ;\r\nlet exponente = ;\r\nlet modulo = ;\r\n\r\nconsole.log(\"mas:\", mas);\r\nconsole.log(\"menos:\", menos);\r\nconsole.log(\"multiplicacion:\", multiplicacion);\r\nconsole.log(\"division:\", division);\r\nconsole.log(\"exponente:\", exponente);\r\nconsole.log(\"modulo: \", modulo);",
      "expected_result": "mas: 13\r\nmenos: 9\r\nmultiplicacion: 22\r\ndivision: 5.5\r\nexponente: 121\r\nmodulo: 1",
      "completed": false
    },
    {
      "title": "LESSON 5",
      "content": "Lorem Ipsum",
      "starting_code": "dolor",
      "expected_result": "^Set amit$",
      "completed": false
    },
    {
      "title": "Formato de Strings",
      "content": "  Muchas veces vas a querer juntar texto con otras variables para hacer oraciones completas. Esto se llama **formatear un String**. Hay dos maneras muy comunes en JavaScript:\n\n* **Concatenación con `+`** – Une texto y variables usando el signo `+`.\n\n**Ejemplo:**\n```js\nlet nombre = \"foo\";\n\"Hola \" + nombre + \"!\"; // \"Hola foo!\"\n```\nNota el espacio en el `\"Hola \"`. Cuando juntando texto, el programa lo junta exacto como lo escribiste. Sin ese espacio solo seria:\n```js\n\"Hola\" + nombre + \"!\"; // \"Holafoo!\"\n```\n\n* **Template literals con `${}`** – Usa comillas invertidas (`` ` ``) y coloca variables dentro de `${}`.\n\nEjemplo: \n```js\nlet nombre = \"foo\";\n`Hola ${nombre}!`; // \"Hola foo!\"\n```\n\nAmbos funcionan igual, pero los *template literals* son más fáciles de leer y escribir, especialmente cuando hay muchas variables.\n\nPor ejemplo, si tienes muchas variables:\n* Concatenación: `\"Hola, me llamo \" + nombre + \", tengo \" + edad + \" años y vivo en \" + ciudad + \".\"`\n* Template literal: `` `Hola, me llamo ${nombre}, tengo ${edad} años y vivo en ${ciudad}.` ``\n\nNormalmente es mas facil usar los `` ` `` que tener que escribir `\"\" + \"\"` varias veces.\n\n<span class='note'>**Práctica:** Crea una variable `nombre` que contiene tu nombre, y luego crea otra variable `mensaje` que sea un String con el text formateado para que te diga `\"Hola [tu nombre]\"`.</span>",
      "starting_code": "let nombre = \"\";\nlet mensaje = ;\nconsole.log(mensaje)",
      "expected_result": "^Hola [A-Za-z]+$",
      "completed": false
    },
    {
      "title": "Proyecto 0",
      "content": "  Ahora vamos a hacer un proyecto para ver si entendiste. Después de cada unidad te daremos un projecto.\n<span class=\"note\">**Objetivo**:\n Crea un Programa simple que dice la historia de un busco de tesoros. Implementa lo que has aprendido en las lecciones pasadas.</span>\n**Instrucciones**\n**Crea** variables para:\n* Tu nombre de pirata(String, por ejemplo \"Capitan Hook\")\n* Tipo de tesoro (String)\n* Cantidad del tesoro que encontraste (Numero)\n* Cantidad de tesoro que enterraste (Numero)\n\n**Usa** operaciones para calcular:\n* El tesoro total\n* Cuanto te queda despues de gastar 5\n\n**Crea Strings usando concatenación** para mostrar mensajes en el terminal:\n* **Saludo** (<span class='fakestring'>\"Ahoy, <span class='emph'>[nombre]</span>\"</span>)\n* **Reporte** (<span class='fakestring'>\"Encontraste <span class='emph'>[numero] [tesoros]</span> y tenías <span class='emph'>[numero]</span> enterradas.\")\n* **Resumen** (<span class='fakestring'>\"Eso hace <span class='emph'>[numero] [tesoros]</span> en total. Después de gastar 5, todavía te quedan <span class='emph'>[numero]</span>\"</span>)\n\n**Ejemplo:**<div class='fakestring'>\"Ahoy, Capitán Hook!\"\n\"Encontraste 15 Zapatos Usados y tenías 7 enterradas.\"\n\"Eso hace 22 monedas de oro en total. Después de gastar 5, todavía te quedan 17!!\"</div>\n",
      "starting_code": "let saludo;\nlet reporte;\nlet resumen;",
      "expected_result": "^Ahoy, .+!\\nEncontraste \\d+ .+ y tenías \\d+ enterradas\\.\\nEso hace \\d+ .+ en total\\. Después de gastar 5, todavía te quedan \\d+!$",
      "completed": false
    }
  ]
}
